# -*- coding: utf-8 -*-
"""srirama.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GOR5tygdnlG2V-Ig0KYIi_5j2AUBp554
"""

import numpy as np
import matplotlib.pyplot as plt
import cv2
import math

def compute_lamb(t, T, lamb_base):
    return 1.5 * 4**(T-t) / (4 ** T - 1) * lamb_base

def fgs1d(lamb, f, g, sigma):
    w = f.shape[0]
    c = np.zeros(w-1)
    c[0] = -lamb * math.exp(-1*np.linalg.norm(g[1]-g[0])/sigma) / (1 + lamb * math.exp(-1*np.linalg.norm(g[1]-g[0])/sigma))
    int_f = np.zeros(w)
    int_f[0] = f[0] / (1 + lamb * math.exp(-1*np.linalg.norm(g[1]-g[0])/sigma))
    a=np.zeros(w)
    for i in range(w-1):
      a[i]=-lamb * math.exp(-1*np.linalg.norm(g[i]-g[i+1])/sigma)
    b=np.zeros(w)
    for i in range(1,w):
      b[i]=-lamb * math.exp(-1*np.linalg.norm(g[i]-g[i-1])/sigma)

    for i in range(1, w-1):
        c[i] = a[i] / (1 -b[i] - a[i] -b[i] * c[i - 1] )
        int_f[i] = (f[i] - int_f[i - 1] * b[i]) / (1 -b[i] -a[i] -b[i]*c[i-1])
    int_f[w-1] = (f[w-1] - int_f[w-2] * b[i]) / (1 -b[w-1] - c[w-2] *b[w-1])
    u = np.zeros(f.shape)
    u[w - 1] = int_f[w - 1]
    for i in range(w - 2, -1, -1):
        u[i] = int_f[i] - c[i] * u[i + 1]
    return u

x1 = np.random.normal(scale=0.2, size=(300))
x = np.concatenate((x1, x1))
plt.plot(np.arange(x.shape[0]), x)

import time
t0 = time.time()
u =fgs1d(900, np.array(x), np.array(x), 0.07)
t1 = time.time()
print(t1-t0)
plt.plot(np.arange(u.shape[0]), u)

def fgs2d(f, T, lamb_base, sigma):
    print('origin lamb is {}'.format(lamb_base))
    print('sigma is {}'.format(sigma))
    H, W, C = f.shape
    u = f.copy()
    for t in range(1, T+1):
        lamb_t = 1.5 * 4**(T-t) / (4 ** T - 1) * lamb_base
        # horizontal
        for y in range(0, W):
            g = u[:, y, :]
            for c in range(C):
                f_h = u[:, y, c]
                u[:, y, c] =fgs1d(lamb_t, f_h, g, sigma)
        # vertical
        for x in range(0, H):
            g = u[x, :, :]
            for c in range(C):
                f_v = u[x, :, c]
                u[x, :, c] =fgs1d(lamb_t, f_v, g, sigma)
    return u

import time
lamb_base = 5**2
sigma = 255 *0.15
T = 1
i=1
img = cv2.imread('./content/0001.png')
img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
t0 = time.time()
u1 = fgs2d(img, T, lamb_base, sigma)
t1 = time.time()
total = t1-t0

plt.imshow(u1)
